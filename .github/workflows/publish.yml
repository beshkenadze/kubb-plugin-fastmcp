name: Publish

on:
  release:
    types: [created]
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
          - canary

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test-suite: [unit, server]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun ci

      - name: Build plugin
        run: bun run build

      - name: Run unit tests
        if: matrix.test-suite == 'unit'
        run: bunx vitest run test/basic.test.ts test/generators.test.tsx --reporter=verbose

      - name: Run server tests
        if: matrix.test-suite == 'server'
        run: bunx vitest run test/server.test.ts --reporter=verbose

  typecheck:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun ci

      - name: Run type checking
        run: bun run typecheck

  publish:
    runs-on: ubuntu-latest
    needs: [test, typecheck]  # Require tests and typecheck to pass
    permissions:
      contents: read
      id-token: write # for npm provenance

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun ci

      - name: Build plugin
        run: bun run build

      - name: Setup npm registry
        run: |
          echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/.npmrc
          npm whoami
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Bump version (manual dispatch)
        if: github.event_name == 'workflow_dispatch'
        run: |
          case "${{ github.event.inputs.release_type }}" in
            "canary")
              npm version prerelease --preid=canary --no-git-tag-version
              ;;
            *)
              npm version ${{ github.event.inputs.release_type }} --no-git-tag-version
              ;;
          esac

      - name: Get new version
        if: github.event_name == 'workflow_dispatch'
        run: echo "NEW_VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_ENV

      - name: Publish to npm (release)
        if: github.event_name == 'release'
        run: npm publish --access public --provenance
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Publish to npm (manual - latest)
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.release_type != 'canary'
        run: npm publish --access public --provenance
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Publish to npm (manual - canary)
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.release_type == 'canary'
        run: npm publish --access public --tag canary --provenance
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create GitHub release (manual dispatch)
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.release_type != 'canary'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.NEW_VERSION }}
          release_name: Release v${{ env.NEW_VERSION }}
          draft: false
          prerelease: false