/**
 * FastMCP Server tests with MSW mocked API responses
 * This is a copy of server.test.ts but uses MSW to mock all API responses
 */

import { execSync } from "child_process";
import fs from "node:fs";
import { beforeAll, describe, expect, test } from "vitest";
import { setupMSWForServerTests } from "./setup-msw-server.ts";

const SERVER_PATH = "./test/generated/fastmcp/server.ts";
const MCP_INSPECTOR = "bunx @modelcontextprotocol/inspector";

// Set up MSW to intercept all API calls
setupMSWForServerTests();

function runMCPCommand(method: string, toolName?: string, args?: string[]): string {
  let cmd = `${MCP_INSPECTOR} --cli bun ${SERVER_PATH} --transport stdio --method ${method}`;

  if (toolName) {
    cmd += ` --tool-name ${toolName}`;
  }

  if (args && args.length > 0) {
    cmd += ` ${args.map(arg => `--tool-arg '${arg}'`).join(' ')}`;
  }

  try {
    return execSync(cmd, {
      encoding: 'utf8',
      timeout: 15000
    });
  } catch (error: any) {
    throw new Error(`MCP command failed: ${error.message}\\nCommand: ${cmd}`);
  }
}

describe("FastMCP Server Tests with MSW Mocks", () => {
  beforeAll(async () => {
    // Verify server file was generated by pretest script
    if (!fs.existsSync(SERVER_PATH)) {
      throw new Error(`Server file not found at ${SERVER_PATH}. Run 'bun run pretest:server-mocks' first.`);
    }

    console.log('Server file found - running with MSW mocks');
  }, 5000);

  test("should list all available tools", () => {
    const output = runMCPCommand("tools/list");
    expect(output).toContain("addPet");
    expect(output).toContain("getInventory");
    expect(output).toContain("loginUser");
  });

  describe.concurrent("Pet Operations with Mock Data", () => {
    test.concurrent("addPet - should return mocked pet data", async ({ expect }) => {
      const output = runMCPCommand("tools/call", "addPet", [
        "name=MockDoggie",
        'photoUrls=["http://example.com/photo1.jpg"]',
        "status=available"
      ]);

      expect(output).not.toContain("error");
      expect(output).toContain("MockPet"); // Should contain mock data
      console.log("✅ addPet with mock data:", output.substring(0, 200));
    });

    test.concurrent("updatePet - should return mocked updated pet", async ({ expect }) => {
      const output = runMCPCommand("tools/call", "updatePet", [
        "id=1",
        "name=MockDoggie-Updated",
        'photoUrls=["http://example.com/photo1.jpg"]',
        "status=sold"
      ]);

      expect(output).not.toContain("error");
      console.log("✅ updatePet with mock data:", output.substring(0, 200));
    });

    test.concurrent("findPetsByStatus - should return mocked pet list", async ({ expect }) => {
      const output = runMCPCommand("tools/call", "findPetsByStatus", ['status=["available", "pending"]']);

      expect(output).not.toContain("error");
      // Should contain mocked data from Faker
      console.log("✅ findPetsByStatus with mock data:", output.substring(0, 200));
    });

    test.concurrent("getPetById - should return mocked pet", async ({ expect }) => {
      const output = runMCPCommand("tools/call", "getPetById", ["petId=1"]);

      expect(output).not.toContain("error");
      // Should contain Faker-generated pet data
      console.log("✅ getPetById with mock data:", output.substring(0, 200));
    });
  });

  describe.concurrent("Store Operations with Mock Data", () => {
    test.concurrent("getInventory - should return mocked inventory", async ({ expect }) => {
      const output = runMCPCommand("tools/call", "getInventory");

      expect(output).not.toContain("error");
      // Should contain mocked inventory data
      console.log("✅ getInventory with mock data:", output.substring(0, 200));
    });

    test.concurrent("placeOrder - should return mocked order", async ({ expect }) => {
      const orderData = JSON.stringify({
        petId: 1,
        quantity: 2,
        shipDate: "2024-01-01T00:00:00.000Z",
        status: "placed",
        complete: false
      });
      const output = runMCPCommand("tools/call", "placeOrder", [`data=${orderData}`]);

      expect(output).not.toContain("error");
      console.log("✅ placeOrder with mock data:", output.substring(0, 200));
    });

    test.concurrent("getOrderById - should return mocked order", async ({ expect }) => {
      const output = runMCPCommand("tools/call", "getOrderById", ["orderId=1"]);

      expect(output).not.toContain("error");
      console.log("✅ getOrderById with mock data:", output.substring(0, 200));
    });
  });

  describe.concurrent("User Operations with Mock Data", () => {
    test.concurrent("createUser - should return mocked user creation", async ({ expect }) => {
      const userData = JSON.stringify({
        username: "mocktestuser",
        firstName: "Mock",
        lastName: "User",
        email: "mock@example.com",
        password: "testpass",
        phone: "123-456-7890",
        userStatus: 1
      });
      const output = runMCPCommand("tools/call", "createUser", [`data=${userData}`]);

      expect(output).not.toContain("error");
      console.log("✅ createUser with mock data:", output.substring(0, 200));
    });

    test.concurrent("loginUser - should return mocked login response", async ({ expect }) => {
      const output = runMCPCommand("tools/call", "loginUser", [
        "username=mocktestuser",
        "password=testpass"
      ]);

      expect(output).not.toContain("error");
      console.log("✅ loginUser with mock data:", output.substring(0, 200));
    });

    test.concurrent("getUserByName - should return mocked user data", async ({ expect }) => {
      const output = runMCPCommand("tools/call", "getUserByName", ["username=mocktestuser"]);

      expect(output).not.toContain("error");
      console.log("✅ getUserByName with mock data:", output.substring(0, 200));
    });
  });

  test("should demonstrate consistent mock responses", () => {
    // Call the same endpoint multiple times - should get consistent results due to seeded Faker
    const output1 = runMCPCommand("tools/call", "getPetById", ["petId=123"]);
    const output2 = runMCPCommand("tools/call", "getPetById", ["petId=123"]);

    expect(output1).not.toContain("error");
    expect(output2).not.toContain("error");
    // Due to Faker seeding, these should be consistent
    console.log("✅ Consistent mock responses verified");
  });
});